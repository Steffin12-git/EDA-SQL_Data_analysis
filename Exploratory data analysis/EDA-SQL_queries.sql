USE DataWarehouseAnalytics;
GO

-- 1)Explore database structure

-- Explore all objects  in the Database
SELECT * 
FROM INFORMATION_SCHEMA.TABLES;

-- Explaore all columns in database
SELECT * 
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

-- 2) Daimension exploration

-- explore all countries our customers  come from
SELECT DISTINCT country
FROM gold.dim_customers;

--- explore all catogories "The major divison"
SELECT DISTINCT category, subcategory, product_name
FROM gold.dim_products;

--- 3) date exploation\
--- find the date of first and last order
SELECT order_date
FROM gold.fact_sales;

SELECT MIN(order_date) first_order_date, 
	   MAX(order_date) last_order_date
FROM gold.fact_sales;

-- How many years of sales are available
SELECT MIN(order_date) first_order_date, 
	   MAX(order_date) last_order_date, 
	   DATEDIFF(YEAR, Min(order_date), MAX(order_date)) order_range
FROM gold.fact_sales;

-- find the youngest and oldest customers
SELECT  MIN(birthdate) oldest_birthdate, 
	    DATEDIFF(YEAR, MIN(birthdate), GETDATE()) oldest_age,	
	    MAX(birthdate) youngest_birth_date,
	    DATEDIFF(YEAR, MAX(birthdate), GETDATE()) youngest_age
FROM gold.dim_customers;

-- 4) measure exploration
-- Find the Total Sales
SELECT SUM(sales_amount)
FROM gold.fact_sales


-- Find how many items are sold
SELECT SUM(quantity)
FROM gold.fact_sales


-- Find the average selling price
SELECT AVG(price)
FROM gold.fact_sales


-- Find the Total number of Orders
SELECT COUNT(order_number)
FROM gold.fact_sales

SELECT COUNT(DISTINCT order_number)
FROM gold.fact_sales

-- Find the total number of products
SELECT COUNT(product_key)
FROM gold.dim_products


-- Find the total number of customers
SELECT COUNT(customer_id)
FROM gold.dim_customers


-- Find the total number of customers that has placed an order
SELECT COUNT(DISTINCT customer_key) as Number_of_customers
FROM gold.fact_sales

--- Generate Report that shows all key metrics of the business
SELECT 'Total Sales' as measure_name,
	   SUM(sales_amount) as measure_value
FROM gold.fact_sales
UNION ALL
SELECT 'Total Quanity',
	   SUM(quantity)
FROM gold.fact_sales
UNION ALL
SELECT 'Average Price',
	   AVG(price)
FROM gold.fact_sales
UNION ALL
SELECT 'Total no of orders' ,
	   Count(DISTINCT order_number)
FROM gold.fact_sales
UNION ALL
SELECT 'Total no of products',
	   Count(product_name)
FROM gold.dim_products
UNION ALL
SELECT 'Total no of customers',
	   Count(customer_key)
FROM gold.dim_customers;

-- 5) magnitude
-- Find total customers by countries
SELECT country, 
Count(DISTINCT customer_key) as 'Total no of customers' 
FROM gold.dim_customers
GROUP BY country
ORDER BY [Total no of customers] DESC;

-- Find total customers by gender
SELECT gender,
Count(DISTINCT customer_key) as 'Total no of customers' 
FROM  gold.dim_customers
GROUP BY gender
ORDER BY [Total no of customers] DESC;


-- Find total products by category
SELECT  category,
COUNT(product_key) "number of products"
FROM gold.dim_products
GROUP BY category
ORDER BY [number of products] DESC;

-- What is the average costs in each category?
SELECT category,
AVG(cost) "AVERAGE COST"
FROM gold.dim_products
GROUP BY category
ORDER BY [AVERAGE COST] DESC;

-- What is the total revenue generated for each category?

SELECT dp.category,
SUM(fs.sales_amount) "Total revenue"
FROM gold.fact_sales fs 
LEFT JOIN gold.dim_products dp ON  dp.product_key= fs.product_key
GROUP BY category
ORDER BY [Total revenue] DESC;


-- Find total revenue is generated by each customer
SELECT fs.customer_key as Custkey,
CONCAT(ds.first_name,' ',ds.last_name)  "customer names",
SUM(fs.sales_amount) "Total revenue"
FROM gold.fact_sales fs 
LEFT JOIN gold.dim_customers ds ON fs.customer_key = ds.customer_key 
GROUP BY  CONCAT(ds.first_name, ' ', ds.last_name), fs.customer_key
ORDER BY [Total revenue] DESC; 


-- What is the distribution of sold items across countries?
SELECT ds.country,
SUM(fs.quantity) "Sold Distribution"
FROM gold.fact_sales fs 
LEFT JOIN gold.dim_customers ds ON fs.customer_key = ds.customer_key 
GROUP BY ds.country
ORDER BY "Sold Distribution" DESC;

-- 6) Ranking
-- Which 5 products generate the highest revenue?
SELECT Top 5
dp.product_name,
SUM(fs.sales_amount) "Total revenue"
FROM gold.fact_sales fs 
LEFT JOIN gold.dim_products dp ON  dp.product_key= fs.product_key
GROUP BY dp.product_name
ORDER BY [Total revenue] DESC;

SELECT *
FROM (SELECT 
	dp.product_name,
	SUM(fs.sales_amount) "Total revenue",
	ROW_NUMBER() OVER(ORDER BY SUM(fs.sales_amount) DESC) AS rank_product
	FROM gold.fact_sales fs 
	LEFT JOIN gold.dim_products dp ON  dp.product_key= fs.product_key
	GROUP BY dp.product_name) t
WHERE rank_product <=5;

-- What are the 5 worst-performing products in terms of sales?
SELECT Top 5
dp.product_name,
SUM(fs.sales_amount) "Total revenue"
FROM gold.fact_sales fs 
LEFT JOIN gold.dim_products dp ON  dp.product_key= fs.product_key
GROUP BY dp.product_name
ORDER BY [Total revenue] ;

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
fs.customer_key as Custkey,
CONCAT(ds.first_name,' ',ds.last_name)  "customer names",
SUM(fs.sales_amount) "Total revenue"
FROM gold.fact_sales fs 
LEFT JOIN gold.dim_customers ds ON fs.customer_key = ds.customer_key 
GROUP BY  CONCAT(ds.first_name, ' ', ds.last_name), fs.customer_key
ORDER BY [Total revenue] DESC;

SELECT *
FROM (SELECT fs.customer_key as Custkey,
	CONCAT(ds.first_name,' ',ds.last_name)  "customer names",
	SUM(fs.sales_amount) "Total revenue",
	ROW_NUMBER() OVER(ORDER BY SUM(fs.sales_amount) DESC) AS rank_customers
	FROM gold.fact_sales fs 
	LEFT JOIN gold.dim_customers ds ON fs.customer_key = ds.customer_key 
	GROUP BY  CONCAT(ds.first_name, ' ', ds.last_name), fs.customer_key) t
WHERE rank_customers <= 10;

-- The 3 customers with the fewest orders placed
SELECT TOP 3
fs.customer_key as Custkey,
CONCAT(ds.first_name,' ',ds.last_name)  "customer names",
COUNT(DISTINCT order_number) "Total orders"
FROM gold.fact_sales fs 
LEFT JOIN gold.dim_customers ds 
	ON fs.customer_key = ds.customer_key 
GROUP BY  CONCAT(ds.first_name, ' ', ds.last_name), fs.customer_key
ORDER BY [Total orders];

SELECT *
FROM (SELECT fs.customer_key as Custkey,
CONCAT(ds.first_name,' ',ds.last_name)  "customer names",
COUNT(DISTINCT order_number) "Total orders",
ROW_NUMBER() OVER( ORDER BY  COUNT(fs.order_number)) order_rank 
FROM gold.fact_sales fs 
LEFT JOIN gold.dim_customers ds 
	ON fs.customer_key = ds.customer_key 
GROUP BY  CONCAT(ds.first_name, ' ', ds.last_name), fs.customer_key) t
WHERE order_rank< = 3;